{"version":3,"sources":["component/Header/Header.jsx","component/Navigation/Navigation.jsx","component/HomePage/index.js","component/HomePage/HomePage.jsx","component/Konfig/Konfig.jsx","component/Konfig/index.js","component/ContactPage/index.js","component/ContactPage/ContactPage.jsx","component/AdminPage/index.js","component/AdminPage/AdminPage.jsx","component/Plansza/index.js","component/Plansza/Plansza.jsx","component/Page/Page.jsx","component/Footer/Footer.jsx","component/Menu/index.js","component/Menu/Menu.jsx","component/Gra/index.js","component/Gra/Gra.jsx","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","menuList","name","path","style","exact","Navigation","state","isOpen","toggleCollapse","_this","setState","menu","map","item","key","react_router_dom","activeClassName","to","Component","HomePage","TypeList","_props$type","type","id","typ","DictList","_props$dict","dict","sl","gt","pt","Konfig","_this$props","this","types","el","Konfig_TypeList","dicts","Konfig_DictList","PureComponent","ContactPage","AdminPage","Plansza","wybor","checked","_this2","selectRow","mode","clickToSelect","clickToExpand","hideExpandAll","selectColumnStyle","_ref","backgroundColor","onSelect","row","Object","toConsumableArray","concat","prevState","filter","onSelectAll","isSelect","rows","e","forEach","expandRow","showExpandColumn","renderer","lib_default","keyField","data","columns","dataField","text","headerStyle","colum","colIndex","width","padding","wrapperClasses","headerClasses","rowClasses","colsClasses","classes","bordered","striped","hover","condensed","length","React","Pages","react_router","component","render","component_Plansza","component_Konfig","Footer","Menu","basename","process","component_Header_Header","component_Navigation_Navigation","Page","component_Footer_Footer","Gra","isLoaded","hasError","isActive","fetchData","fetch","then","response","json","dt","w","catch","err","console","log","componentDidCatch","setTimeout","componentDidMount","componentDidUpdate","_this$state","component_Menu","Boolean","window","location","hostname","match","ReactDOM","component_Gra","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a4a9d5bd.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => (\n  <div className=\"HeaderWrapper\">\n    Test content header\n  </div>\n);\n\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport {NavLink} from 'react-router-dom';\nimport './Navigation.css';\n\n\nconst menuList = [\n  {name:'info',path:'/',style:'info_selected',exact:true},\n  {name:'gra',path:'/gra',style:'gra_selected'},\n  {name:'ustawienia',path:'/ustawienia',style:'ustawienia_selected'},\n  {name:'kontakt',path:'/contact',style:'contact_selected'},\n  {name:'panel admina',path:'/admin',style:'admin_selected'}\n]\n\n\n\nclass Navigation extends Component {\nstate = {\n  isOpen: false\n};\n\n\n\ntoggleCollapse = () => {\n  this.setState({ isOpen: !this.state.isOpen });\n}\n\nrender() {\n\n  const menu = menuList.map(item => (\n    <li className=\"navli\" key={item.name}>\n        <NavLink activeClassName={item.style} to={item.path}\n        exact={item.exact? item.exact : false }\n        >\n            {item.name}\n        </NavLink>\n    </li>\n    )\n)\n\nreturn (\n    <nav  className=\"navigation\" >\n        <ul className=\"navul\">\n            {menu}\n        </ul>\n    </nav>\n\n );\n\n  }\n}\n\nexport default Navigation;\n\n","import HomePage from './HomePage';\n\nexport default HomePage;\n","import React from 'react';\n\n//import { Test } from './HomePage.styles';\nimport './HomePage.scss';\n\nconst HomePage = (props) => (\n  <div className=\"HomePageWrapper\">\n    <article>\n    <h1>GRA WISIELEC</h1>\n    <p>\n    Gra polega na odgadnięciu słowa, którego typ znajduje się w stopce\n    </p>\n    </article>\n  </div>\n);\n\nexport default HomePage;\n","import React, { PureComponent } from 'react';\n\nconst TypeList = props => {\n  \n  const {id,typ} = props.type;\n    \n  return ( \n    <div className=\"typeList\">\n    {id} {typ}\n  </div>\n\n   );\n}\n \n\nconst DictList = props => {\n  const {id,sl,gt,pt,typ} = props.dict;\n\n  \n  return ( \n    <div className=\"dictsList\">\n    {id} {sl} {gt} {pt} {typ}\n    </div>\n   );\n}\n \n\n\nclass Konfig extends PureComponent { \n\n \n render () {\n    const {dict,type} = this.props; \n    const types=type.map(el=>(\n      <TypeList  key={el.id} type={el}/>\n    ))\n\n    const dicts=dict.map(el=>(\n      <DictList key={el.id} dict={el} />\n    ))\n\n    \n    return (\n      <div className=\"KonfigWrapper\">\n        <div className=\"typList\">\n          <h1>Typy pytań</h1>  \n            {types}\n        </div>\n      <div className=\"dictList\">\n          <h1>Lista elementów słownika</h1>\n          {dicts}\n      </div>\n      </div>\n    );\n  } \n}\n\nexport default Konfig;\n","import Konfig from './Konfig';\n\nexport default Konfig;\n","import ContactPage from './ContactPage';\n\nexport default ContactPage;\n","import React from 'react';\n\nconst ContactPage = (props) => (\n  <div className=\"ContactPageWrapper\">\n    kontakt\n  </div>\n);\n\n\n\nexport default ContactPage;\n","import AdminPage from './AdminPage';\n\nexport default AdminPage;\n","import React from 'react';\n\n\nconst AdminPage = (props) => (\n  <div className=\"AdminPageWrapper\">\n    Test content AdminPage\n  </div>\n);\n\n\nexport default AdminPage;\n","import Plansza from './Plansza';\n\nexport default Plansza;\n","import React from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport '../Item/Item.scss';\n\n//import Item from '../Item/Item'\n//mport './Plansza.scss';\n//const Plansza = props => {\n\nclass Plansza extends React.Component {\n\n  state ={\n    wybor:[],\n    id:[],\n    checked:false\n  }\n\nrender(){\n  const {type,dict} = this.props;\n \n\n  //const type = this.props.type; \n  const columns = [{\n    dataField: 'id',\n    text: 'ID',\n    headerStyle: (colum, colIndex) => {\n      return { width: '45px', padding: '5px' };\n    }\n  }, \n  {\n    dataField: 'typ',\n    text: 'Typ Name',\n    headerStyle: (colum, colIndex) => {\n      return { width: '165px', padding: '5px' };\n    }\n  }];\n  \n  const selectRow = {\n    mode: 'checkbox',\n    clickToSelect: true,\n    clickToExpand: true,\n    hideExpandAll: true,\n    selectColumnStyle: ({\n      checked,\n    }) => {\n      if (checked) {\n        return {\n          backgroundColor: 'rgb(177, 166, 166)'\n        };\n      }\n     \n    },\n\n    onSelect: (row,checked) => {\n      let  wybor  = [...this.state.wybor];\n      row.checked = checked;\n      wybor=[...wybor,row];\n      const id = row.id;\n      if(checked){\n        this.setState(prevState => ({\n          wybor\n        }))\n      }else{\n        wybor = wybor.filter(typ => typ.id !== id)\n        this.setState({\n        wybor\n        })\n      }\n    },\n\n    onSelectAll: (isSelect, rows, e) => {\n      if(isSelect){\n      rows.forEach(el => {\n        el.checked = isSelect;\n      });\n        this.setState({\n          wybor:rows\n        })\n      }else{\n        this.setState({\n          wybor:[]\n        })\n      }\n    }\n  };\n  \n  const expandRow = {\n    showExpandColumn: true,\n    renderer: (row) => (\n      <div className=\"row-expand\" >\n        <p>{ row.checked? `wybrałeś wiersz o id=${row.id} i typ=${row.typ}`: null }</p>\n      </div>\n    )\n  };\n  \n  let types=this.state.wybor.map(el => (\n    <li key={el.id}> <span>id: {el.id}</span> typ: {el.typ} </li>\n  ))\n  \n  return ( \n    <div className=\"wrap\">\n    <BootstrapTable \n      keyField='id' \n      data={ type } \n      columns={ columns }  \n      wrapperClasses=\"boo\"\n      headerClasses=\"headerClas\"\n      rowClasses=\"custom-row-class\"\n      colsClasses=\"custom-col-class\"\n      selectRow={ selectRow }\n      classes=\"foo\"\n      expandRow={ expandRow }\n      bordered={false}\n      striped\n      hover\n      condensed\n      />\n      <div className=\"wybrane\">\n      {types.length === 0 ? <h1>wybierz typ gry</h1> : <h1>wybrałeś:</h1>}\n          <ul>\n          <h4>{types}</h4>\n          </ul>\n      </div>\n      </div>\n   );\n  }\n\n}\n\n\nexport default Plansza;\n\n","import React from 'react';\nimport { Route,Switch } from 'react-router-dom';\nimport HomePage from '../HomePage/index';\nimport Gra from '../Gra/index';\n//import ProductsPage from '../pages/ProductsPage';\nimport Konfig from '../Konfig/index';\nimport ContactPage from '../ContactPage/index';\nimport AdminPage from '../AdminPage/index';\n//import LoginPage from '../pages/LoginPage';\n//import ErrorPage from '../pages/ErrorPage';\nimport Plansza from '../Plansza/index';\n\nconst Pages = props => {\n  //const {type,dict} = this.props;\n  const {type,dict} = props;\n  \n    return (\n      <Switch>\n        <Route path=\"/\" exact component={HomePage} />\n        <Route path=\"/gra\"  render={props => <Plansza type={type} dict={dict}  />}  />\n        <Route path=\"/ustawienia\" render={props => <Konfig type={type} dict={dict}  />}   />\n        <Route path=\"/contact\"  component={ContactPage} />\n        <Route path=\"/admin\"  component={AdminPage} />\n       </Switch>\n      );\n}\n \nexport default Pages;","import React from 'react';\n\nconst Footer = (props) => (\n  <div className=\"FooterWrapper\">\n    Test content Footer\n  </div>\n);\n\n\nexport default Footer;\n","import Menu from './Menu';\n\nexport default Menu;\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport Header from '../Header/Header';\nimport Navigation from '../Navigation/Navigation';\nimport Page from '../Page/Page';\nimport Footer from '../Footer/Footer';\n\nimport './Menu.scss';\n\nclass Menu extends Component { \n\n\n  render () {\n    const {type,dict} = this.props;\n    return (\n      <Router basename={process.env.PUBLIC_URL} >\n      <div className=\"app\">\n        <header className=\"header\">\n          <div className=\"head\">\n          {<Header />}\n          </div>\n          <div className=\"nav\">\n          {<Navigation/>}\n          </div>\n        </header>\n        <main>\n          <section className=\"page\">\n          {<Page  type={type} dict={dict} />}\n          </section>\n        </main>\n        <footer>\n          {<Footer / >} \n        </footer>\n        </div>\n      </Router>\n    );\n  }\n}\n\n\nexport default Menu;\n","import Gra from './Gra';\n\nexport default Gra;\n","import React, { PureComponent } from 'react';\nimport './Gra.scss';\nimport Menu from '../Menu/index';\nimport {Link} from 'react-router-dom';\n\n//import Slownik from './Gra.styles';\n\n\nclass Gra extends PureComponent { \n    state = {\n      dict:[],\n      type:[],\n      isLoaded:false,\n      hasError: false,\n      isActive:false\n    };\n  \n\n  fetchData = () => {\n  fetch('data/dictionary.json')\n    .then(response => response.json())\n    .then(data => {\n      const dt = data.dict;\n      const w = this.state.dict;\n      if (dt.length !== w.length){\n      this.setState({\n        dict:data.dict,\n        type:data.type,\n        isLoaded: !this.state.isLoaded\n      })\n    }\n  })\n  .catch(err => {\n    // Do something for an error here\n    console.log(\"Error Reading data \" + err);\n  });\n}\n\n\n  componentDidCatch = () => {\n    setTimeout(this.fetchData, 1000);\n  }\n\n  componentDidMount = () => {\n    setTimeout(this.fetchData, 1000);\n  }\n\n  componentDidUpdate = () => {\n    setTimeout(this.fetchData, 1000);\n  }\n\n  // getTypeDict = () => {\n  //   let type = [...this.state.dict];\n  //   type=type.map(d => d.typ);\n  //   const uniqueTyp = Array.from(new Set(type));\n    \n  // }\n\n  render () {\n    \n    const {dict,type,isLoaded} = this.state;\n    return (\n      <div className=\"GraWrapper\">\n      {isLoaded ? <Menu dict={dict} type={type} /> : \"czekaj na załadowanie\" } \n      \n      </div>\n    );\n  }\n}\n\n\nexport default Gra;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport Gra from './component/Gra/index';\n//import Menu from './component/Menu/Menu'\n//import App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Gra />, document.getElementById('gra'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}